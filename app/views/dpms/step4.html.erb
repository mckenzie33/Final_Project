<!--process: 
-create hash and get the graph number (-1) to show one graph
-calculate Tstress, Tstrain, Pstrain 
-get hardstress/hardstrain points
-get all values needed to solve system of equations (calculated) 
-solve for the 3 sets of systems 
-plot these 3 final graphs once they are calculated
-->
<strong> STEP 4: Finalize Output </strong>
<% graph = create_hash(Rails.root.to_s.concat("/public").concat(@dpm.filename.url)) %>
<% trial = graph[@dpm.graph_number - 1] %>
<% pstrain = tp_strain(trial, @dpm.youngs_modulus) %>

<% tstrain = getTstrain(trial) %>

<% hardstress = removePastX(pstrain, @dpm.necking_point) %>

<% plus = (@dpm.fitting_param * (1 + (@dpm.threshold/100.0)))%>
<% minus = (@dpm.fitting_param * (1 - (@dpm.threshold/100.0)))%>

<% normal = getSystemVars(trial, pstrain, tstrain, hardstress, @dpm.necking_point, @dpm.gauge_length, @dpm.fitting_param, @dpm.youngs_modulus) %>
<% plusfit = getSystemVars(trial, pstrain, tstrain, hardstress, @dpm.necking_point, @dpm.gauge_length, plus, @dpm.youngs_modulus) %>
<% minusfit = getSystemVars(trial, pstrain, tstrain, hardstress, @dpm.necking_point, @dpm.gauge_length, minus, @dpm.youngs_modulus) %>

<% swiftscos = [] %>
<% swiftscos << getSwifts(normal[0], normal[1], normal[2], normal[3]) %>
<% swiftscos << getSwifts(plusfit[0], plusfit[1], plusfit[2], plusfit[3]) %>
<% swiftscos << getSwifts(minusfit[0], minusfit[1], minusfit[2], minusfit[3]) %>
<% if swiftscos[0] == nil %>
<H1>ERROR: COULD NOT SOLVE FOR SWIFT COEFFICIENTS</H1>
<strong>PLEASE GO BACK TO STEP 2 AND CHOOSE NEW NECKING POINT</strong>
<% else %>
<% swiftgraphs = [] %>

<% swiftgraphs << createSwiftPoints(@dpm.necking_point, 500, hardstress.length, swiftscos[0]) %>
<% swiftgraphs << createSwiftPoints(@dpm.necking_point, 500, hardstress.length, swiftscos[1]) %>
<% swiftgraphs << createSwiftPoints(@dpm.necking_point, 500, hardstress.length, swiftscos[2]) %>
<% output = []%>
<% output[0] = rounder(swiftgraphs[0], 4) %>
<% output[1] = rounder(swiftgraphs[1], 4) %>
<% output[2] = rounder(swiftgraphs[2], 4) %>
<% maxMin = getMaxMin(output[0]) %>
<p>
<%= line_chart output.map.with_index {|ea, i| {:name => i+1, :data => ea}}, {discrete: true, library: {pointSize: 0, title: "Swift Hardening Law Fit", vAxis: {title: "True Stress (MPa)", viewWindow:{ max:maxMin[0]*1.1, min:maxMin[1]}}, hAxis: {title: "True Strain (mm/mm)"}}} %>
</p>
<%= form_for(@dpm, :url => step4_path(:id => @dpm.id), :method => 'put') do |f| %>
  <% if @dpm.errors.any? %>
    <div id="error_explanation">
      <h2><%= pluralize(@dpm.errors.count, "error") %> prohibited this dpm from being saved:</h2>

      <ul>
      <% @dpm.errors.full_messages.each do |msg| %>
        <li><%= msg %></li>
      <% end %>
      </ul>
    </div>
  <% end %>
 <div class="col-lg-3">
  <div class="field">
  	<p>Please enter output file name</p>
    <%= f.label :output_file %><br>
    <%= f.text_field :output_file%>
  </div>
 </div>
 <div class="col-lg-3">
  <div class="field">
  <p>Please enter your name</p>
    <%= f.label :person %><br>
    <%= f.text_field :person, :title => "First/Last Name" %>
  </div>
 </div>
  <div class="actions">
    <%= f.submit "Next Step" %>
  </div>
  <%= link_to 'Change Input File', edit_dpm_path(@dpm) %>
<% end %>
<% end %>